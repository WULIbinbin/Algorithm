(function(f,s){typeof exports=="object"&&typeof module<"u"?s(exports):typeof define=="function"&&define.amd?define(["exports"],s):(f=typeof globalThis<"u"?globalThis:f||self,s(f.es={}))})(this,function(f){"use strict";function s(n,e="undefined"){return Object.prototype.toString.call(n)===`[object ${e[0].toUpperCase()}${e.substring(1)}]`}const h="pending",m="fulfilled",P="rejected";function c(n){const e=this;this.PromiseState=h,this.PromiseResult=void 0,this.onFulfilledCallBack=[],this.onRejectedCallBack=[];try{if(!s(n,"function"))throw new Error("\u8BF7\u6DFB\u52A0\u56DE\u8C03\u51FD\u6570");n(i,r)}catch(t){r(t)}function i(t){e.PromiseState===h&&(e.PromiseState=m,e.PromiseResult=t,e.onFulfilledCallBack.forEach(o=>o(t)))}function r(t){e.PromiseState===h&&(e.PromiseState=P,e.PromiseResult=t,e.onRejectedCallBack.forEach(o=>o(t)))}}c.prototype.then=function(e,i){s(e,"function")||(e=t=>t),s(i,"function")||(i=t=>{throw t});const r=new c((t,o)=>{const u=()=>{setTimeout(()=>{try{const l=e(this.PromiseResult);d(r,l,t,o)}catch(l){o(l)}})},p=()=>{setTimeout(()=>{try{const l=i(this.PromiseResult);d(r,l,t,o)}catch(l){o(l)}})};this.PromiseState===h&&(this.onFulfilledCallBack.push(u),this.onRejectedCallBack.push(p)),this.PromiseState===m&&u(),this.PromiseState===P&&p()});return r};function d(n,e,i,r){if(n===e)throw new TypeError("Chaining cycle:\u4E0D\u80FD\u8FD4\u56DE\u81EA\u8EAB");if(e&&(s(e,"object")||s(e,"function"))){let t=!1;try{const{then:o}=e;if(s(o,"function"))o.call(e,u=>{t||(t=!0,d(n,u,i,r))},u=>{t||(t=!0,r(u))});else{if(t)return;t=!0,i(e)}}catch(o){if(t)return;t=!0,r(o)}}else i(e)}c.resolve=function(e){return e instanceof c?e:new c(i=>{i(e)})},c.reject=function(e){return new c((i,r)=>{r(e)})};const a=c;a.resolve().then(()=>(console.log(0),a.resolve(4))).then(n=>{console.log(n)}),a.resolve().then(()=>{console.log(1)}).then(()=>{console.log(2)}).then(()=>{console.log(3)}).then(()=>{console.log(5)}).then(()=>{console.log(6)}),f.MyPromise=a,Object.defineProperties(f,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
